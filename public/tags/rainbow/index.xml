<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wouter Veeken – Technical writer, information architect, localization professional</title>
    <link>http://wouter.tech/tags/rainbow/index.xml</link>
    <description>Recent content on Wouter Veeken – Technical writer, information architect, localization professional</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <atom:link href="http://wouter.tech/tags/rainbow/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Translating a MadCap Flare project without Lingo</title>
      <link>http://wouter.tech/blog/translating-flare-without-lingo/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://wouter.tech/blog/translating-flare-without-lingo/</guid>
      <description>

&lt;p&gt;I don&amp;rsquo;t really like MadCap Lingo. Compared to other modern, more mature CAT tools, I have found it buggy and primitive, not to mention expensive for what it does. So when I needed to get my MadCap Flare project translated into 4 different languages, I came up with an alternative solution using an open source tool called Rainbow. I am sharing my approach here for the benefit of others.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: The below has worked for me – so far. My translations are still ongoing. It&amp;rsquo;s entirely possible that 1) my methods don&amp;rsquo;t work for your project and 2) I run into problems with my own project later on. Nevertheless, I am hoping this will get you at least part of the way there. You&amp;rsquo;re always welcome to &lt;a href=&#34;mailto:me@wouter.tech&#34;&gt;ask me questions&lt;/a&gt; if you think I can help.&lt;/p&gt;

&lt;h2 id=&#34;what-you-ll-need&#34;&gt;What you&amp;rsquo;ll need&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Some knowledge of HTML, XML and similar markup languages;&lt;/li&gt;
&lt;li&gt;a MadCap Flare project;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rainbow, which is bundled with the &lt;a href=&#34;https://bintray.com/okapi/Distribution/Okapi_Applications&#34;&gt;Okapi Framework apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Some people have reported problems running the 64-bit version of Rainbow. If that&amp;rsquo;s the case for you, just install the 32-bit version. It works exactly the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the above, it helps if you have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a basic understanding of translation processes and related file types, such as TMX and XLIFF;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.omegat.org/en/omegat.html&#34;&gt;OmegaT&lt;/a&gt;, to test the translation package you&amp;rsquo;re creating.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;terms-and-acronyms-used-in-this-article&#34;&gt;Terms and acronyms used in this article&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LSP:&lt;/strong&gt; Language service provider, e.g. a translation agency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CAT tool:&lt;/strong&gt; Computer assisted translation tool, e.g. Trados, MemoQ and similar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;translating-the-project-vs-translating-the-output&#34;&gt;Translating the project vs. translating the output&lt;/h2&gt;

&lt;p&gt;There are essentially two ways you can approach the translation of your Flare project: you can either translate your original project files (pre-build), or you can translate the actual output (post-build). My process uses the first approach, but here are some pros and cons for both options:&lt;/p&gt;

&lt;p&gt;Translating the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[+] Everything is nicely compartmentalized, i.e. variables, snippets, TOC, topics are in separate files.&lt;/li&gt;
&lt;li&gt;[+] Can extract image annotations for translation (if you&amp;rsquo;re using Capture).&lt;/li&gt;
&lt;li&gt;&lt;del&gt;[-] Can&amp;rsquo;t use condition tags to exclude files you don&amp;rsquo;t want to translate.&lt;/del&gt;
&lt;strong&gt;EDIT 03-Apr-2017&lt;/strong&gt;: I totally failed to notice that you can choose include/exclude conditions when you &lt;a href=&#34;#PreparingYourProjectForTranslation&#34;&gt;export the project from Flare&lt;/a&gt;. So this isn&amp;rsquo;t a con at all!&lt;/li&gt;
&lt;li&gt;[-] Since you have to build the project after putting the files through multiple conversion and translation steps, there might be some surprises.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Translating the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[+] Project is already built, so the risk of breaking stuff by converting/translating files is much smaller.&lt;/li&gt;
&lt;li&gt;[-] Translation package will contain lots of repetition (e.g. snippets, the same TOC on every page), which is annoying for translator and may affect translation cost.&lt;/li&gt;
&lt;li&gt;[-] Can&amp;rsquo;t extract image annotations for translation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although there are several reasons why I chose the first approach, that last one clinched it for me. If image annotations are not a factor for you, perhaps it might be easier to just zip the output and send it off to your translator or LSP.&lt;/p&gt;

&lt;h2 id=&#34;high-level-steps&#34;&gt;High-level steps&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s what you&amp;rsquo;ll roughly be doing if you follow my instructions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Export a copy of your source-language project from Flare.&lt;/li&gt;
&lt;li&gt;Add the files you want to translate to Rainbow.&lt;/li&gt;
&lt;li&gt;Create a few custom filter configurations in Rainbow.&lt;/li&gt;
&lt;li&gt;Create a translation package in Rainbow.&lt;/li&gt;
&lt;li&gt;Send everything to be translated.&lt;/li&gt;
&lt;li&gt;Convert the translated files back to their original format in Rainbow.&lt;/li&gt;
&lt;li&gt;Build the translated project in Flare.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is just to provide an overview. It is not a table of contents.&lt;/p&gt;

&lt;h2 id=&#34;a-name-preparingyourprojectfortranslation-a-preparing-your-project-for-translation&#34;&gt;&lt;a name=&#34;PreparingYourProjectForTranslation&#34;&gt;&lt;/a&gt;Preparing your project for translation&lt;/h2&gt;

&lt;p&gt;Open your project in Flare and select &lt;strong&gt;Project &amp;gt; Export Project&lt;/strong&gt; to create a copy. Tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;Export From&lt;/strong&gt; &amp;gt; &lt;strong&gt;Using Conditions&lt;/strong&gt; to exclude drafts and other files you don&amp;rsquo;t want translated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You might think it clever to use a special condition tag to explicitly mark files for translation, but bear in mind you&amp;rsquo;ll be building the project afterwards. So if you do use a special tag, make sure you include in your export all the files required for a successful build.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I recommend appending the filename of the exported project with the source and target language codes. E.g. if you&amp;rsquo;re translating from (US) English to French, save as &lt;code&gt;my_flare_project_en-US_fr-FR.flprj&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;preparing-your-translation-package-with-rainbow&#34;&gt;Preparing your translation package with Rainbow&lt;/h2&gt;

&lt;p&gt;Rainbow is sort of a Swiss army knife for translators and translation project managers. It offers file conversion, terminology extraction, quality checks, pre-translation, and about a million other things I haven&amp;rsquo;t even begun to explore myself. Unfortunately, it&amp;rsquo;s also got a steep learning curve. There&amp;rsquo;s a &lt;a href=&#34;http://okapiframework.org/wiki/index.php?title=Rainbow&#34;&gt;wiki&lt;/a&gt; which is fairly comprehensive, but it often lacks detail in important areas, and some parts seem out of date. Thankfully, you&amp;rsquo;ve got this blog to help you!&lt;/p&gt;

&lt;h3 id=&#34;basic-configuration&#34;&gt;Basic configuration&lt;/h3&gt;

&lt;p&gt;Fire up Rainbow and do these things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On the &lt;strong&gt;Languages and Encodings&lt;/strong&gt; tab, select the relevant source and target language.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the same tab, set the encoding for source and target to &lt;strong&gt;Unicode (UTF-8)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This was the correct encoding for my project files – I assume it&amp;rsquo;s the same for all Flare projects. You can check by opening one of your topics in a program like &lt;a href=&#34;https://notepad-plus-plus.org/&#34;&gt;Notepad++&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;strong&gt;Other Settings&lt;/strong&gt; tab, de-select &lt;strong&gt;Use an extension&lt;/strong&gt;. This is important because you want the final, translated files to retain their original names. Under the default settings, &lt;code&gt;topic.htm&lt;/code&gt; becomes &lt;code&gt;topic.out.htm&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save your configuration (&lt;strong&gt;File &amp;gt; Save&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;adding-files-to-your-package&#34;&gt;Adding files to your package&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Select the &lt;strong&gt;Input List 1&lt;/strong&gt; tab.&lt;/li&gt;
&lt;li&gt;In Windows Explorer, navigate to the root directory of your exported Flare project.&lt;/li&gt;
&lt;li&gt;Drag all the file types you want to translate into the Rainbow window. (See &lt;a href=&#34;#WhichFilesToInclude&#34;&gt;Which files to include&lt;/a&gt; below.)&lt;/li&gt;
&lt;li&gt;Delete from the list any files you don&amp;rsquo;t want translated. You could do this by opening your Flare projects and looking for files with certain publishing conditions or file tags (e.g. &amp;lsquo;draft&amp;rsquo;, &amp;lsquo;internal only&amp;rsquo;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;a-name-whichfilestoinclude-a-which-files-to-include&#34;&gt;&lt;a name=&#34;WhichFilesToInclude&#34;&gt;&lt;/a&gt;Which files to include&lt;/h4&gt;

&lt;p&gt;From the &lt;code&gt;Project&lt;/code&gt; folder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Project\Glossaries&lt;/code&gt; (&lt;code&gt;.flglo&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project\TOCs&lt;/code&gt; (&lt;code&gt;.fltoc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project\VariableSets&lt;/code&gt; (&lt;code&gt;.flvar&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;code&gt;Content&lt;/code&gt; folder:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Content\MasterPages&lt;/code&gt; (&lt;code&gt;.flmsp&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content\PageLayouts&lt;/code&gt; (&lt;code&gt;.flpgl&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;All image property files (&lt;code&gt;.props&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;All snippet files (&lt;code&gt;.flsnp&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;All topic files (&lt;code&gt;.htm&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Files I have not tried to translate, as my project doesn&amp;rsquo;t use them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Project\Synonyms&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project\CSH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project\Browse sequences&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Files that need special treatment (will cover this in a future update – ignore them for now):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Content\Stylesheets&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;applying-filters&#34;&gt;Applying filters&lt;/h3&gt;

&lt;p&gt;Rainbow includes a large set of filter configurations, which you can see by selecting &lt;strong&gt;Tools &amp;gt; Filter Configurations&lt;/strong&gt;. Rainbow uses these filters to  determine which parts of a given file are translatable, i.e. which parts it should extract and put in a translation package.&lt;/p&gt;

&lt;p&gt;A Flare project consists of HTML and XML files. Rainbow has default filters for these file types, but they will only work for a few of your files. You&amp;rsquo;ll have to create custom filters for the rest.&lt;/p&gt;

&lt;h4 id=&#34;apply-default-filter-to-glossaries-flglo-and-variable-sets-flvar&#34;&gt;Apply default filter to glossaries (&lt;code&gt;.flglo&lt;/code&gt;) and variable sets (&lt;code&gt;.flvar&lt;/code&gt;)&lt;/h4&gt;

&lt;p&gt;The default &lt;strong&gt;okf_xml&lt;/strong&gt; filter will work for glossaries and variable sets. To apply this filter:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using your mouse and the &lt;strong&gt;Ctrl&lt;/strong&gt; and &lt;strong&gt;Shift&lt;/strong&gt; keys, select all files ending in &lt;code&gt;.flglo&lt;/code&gt; and &lt;code&gt;.flvar&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Right-click on any of the selected files and select &lt;strong&gt;Edit Document Properties&lt;/strong&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Under &lt;strong&gt;Filter configuration&lt;/strong&gt;, select &lt;strong&gt;XML Filter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wouter.tech/img/rainbow-select-xml-filter.png&#34; alt=&#34;Select the XML filter&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &lt;strong&gt;Filter Configuration&lt;/strong&gt; column, it should say &lt;strong&gt;okf_xml&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&#34;create-filter-for-topics-htm-snippets-flsnp-and-master-pages-flmsp&#34;&gt;Create filter for topics (&lt;code&gt;.htm&lt;/code&gt;), snippets (&lt;code&gt;.flsnp&lt;/code&gt;) and master pages (&lt;code&gt;.flmsp&lt;/code&gt;)&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Using the same methods as above, select all files ending in &lt;code&gt;.htm&lt;/code&gt;, &lt;code&gt;.flsnp&lt;/code&gt; and &lt;code&gt;.flmsp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Right-click on any of the selected files and select &lt;strong&gt;Edit Document Properties&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under &lt;strong&gt;Filter configuration&lt;/strong&gt; select &lt;strong&gt;HTML/XHTML Filter&lt;/strong&gt;.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Create&lt;/strong&gt; to create a custom filter configuration based on &lt;strong&gt;okf_html&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wouter.tech/img/rainbow-create-custom-filter.png&#34; alt=&#34;Create a custom filter&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enter the name &lt;code&gt;flare-topic&lt;/code&gt; and click &lt;strong&gt;OK&lt;/strong&gt;. The full name will appear as &lt;code&gt;okf_html@flare-topic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The filter&amp;rsquo;s parameters now appear. This particular filter uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; format.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wouter.tech/img/rainbow-html-filter-parameters.png&#34; alt=&#34;HTML filter parameters&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change &lt;code&gt;preserve_whitespace: false&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. This ensures that the whitespace around e.g. cross-references is retained during conversion.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scroll down a little until you see &lt;code&gt;elements:&lt;/code&gt; and insert the following lines immediately after it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;madcap:variable:
  ruleTypes: [INLINE]
  SelementType: variable    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ensures proper handling of in-line variables. (They are treated as line breaks otherwise.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;OK&lt;/strong&gt; to close the editor, then &lt;strong&gt;OK&lt;/strong&gt; to return to the file list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now is probably a good time to save your Rainbow configuration file, so select &lt;strong&gt;File &amp;gt; Save&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;create-filter-for-tocs-fltoc&#34;&gt;Create filter for TOCs (&lt;code&gt;.fltoc&lt;/code&gt;)&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select all &lt;code&gt;.fltoc&lt;/code&gt; files and create a new filter called &lt;code&gt;okf_xml@flare-TOC&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unsurprisingly, the parameters of this filter are written in XML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wouter.tech/img/rainbow-xml-filter-parameters.png&#34; alt=&#34;XML filter parameters&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Replace the default parameters with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;its:rules xmlns:its=&amp;quot;http://www.w3.org/2005/11/its&amp;quot; xmlns:itsx=&amp;quot;http://www.w3.org/2008/12/its-extensions&amp;quot; xmlns:okp=&amp;quot;okapi-framework:xmlfilter-options&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; version=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;its:translateRule selector=&amp;quot;//@Title&amp;quot; translate=&amp;quot;yes&amp;quot;/&amp;gt;
  &amp;lt;!-- See ITS specification at: http://www.w3.org/TR/its/ --&amp;gt;
&amp;lt;/its:rules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This tells Rainbow that the values of all &lt;code&gt;Title&lt;/code&gt; attributes contain translatable text. (By default, attributes in XML files are considered non-translatable.)&lt;/p&gt;

&lt;h4 id=&#34;create-filter-for-image-annotations-props&#34;&gt;Create filter for image annotations (&lt;code&gt;.props&lt;/code&gt;)&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select all &lt;code&gt;.props&lt;/code&gt; files and create a new filter called &lt;code&gt;okf_xml@flare-props&lt;/code&gt;, containing this code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;its:rules xmlns:its=&amp;quot;http://www.w3.org/2005/11/its&amp;quot; xmlns:itsx=&amp;quot;http://www.w3.org/2008/12/its-extensions&amp;quot; xmlns:okp=&amp;quot;okapi-framework:xmlfilter-options&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; version=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;its:translateRule selector=&amp;quot;//fileProperties&amp;quot; translate=&amp;quot;no&amp;quot;/&amp;gt;
  &amp;lt;its:translateRule selector=&amp;quot;//Shape[@Type=&#39;Annotation&#39;]&amp;quot; translate=&amp;quot;yes&amp;quot;/&amp;gt;
  &amp;lt;!-- See ITS specification at: http://www.w3.org/TR/its/ --&amp;gt;
&amp;lt;/its:rules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This tells rainbow that all &lt;code&gt;&amp;lt;fileProperties&amp;gt;&lt;/code&gt; elements &lt;em&gt;and&lt;/em&gt; their children should be ignored, &lt;em&gt;except&lt;/em&gt; when one of those children is a &lt;code&gt;&amp;lt;Shape Type=&#39;Annotation&#39;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;save-your-filters-for-future-use&#34;&gt;Save your filters for future use&lt;/h4&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to back up your custom filters for future translation projects. By default, they are stored in Rainbow&amp;rsquo;s installation directory, in a subfolder called &lt;code&gt;config&lt;/code&gt;. You can keep them there, or organize them by project/client/category/whatever.&lt;/p&gt;

&lt;h3 id=&#34;create-the-translation-package&#34;&gt;Create the translation package&lt;/h3&gt;

&lt;p&gt;A fundamental feature of Rainbow is that it lets you build conversion &amp;lsquo;pipelines&amp;rsquo;, which enable you to put in a bunch of files on one end (i.e. source texts, terminology files, translation memories) and produce a neat little translation package at the other, which you can then send off to a translator/LSP.&lt;/p&gt;

&lt;p&gt;You can build your pipelines from scratch by choosing from dozens of configurable steps, but for the present purposes you can use one of Rainbow&amp;rsquo;s pre-defined pipelines.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;Utilities &amp;gt; Translation Kit Creation&lt;/strong&gt;.
This fires up the pre-defined pipeline for creating translation packages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://wouter.tech/img/rainbow-translation-kit-creation.png&#34; alt=&#34;Translation Kit Creation pipeline&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the list of steps on the left, select the bottom one (&lt;strong&gt;Rainbow Translation Kit Creation&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;strong&gt;Package Format&lt;/strong&gt; tab, select &lt;strong&gt;Generic XLIFF&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Any CAT tool worth its salt (e.g. Trados, MemoQ, OmegaT) can handle &lt;a href=&#34;https://en.wikipedia.org/wiki/XLIFF&#34;&gt;XLIFF&lt;/a&gt;, so that&amp;rsquo;s the format I use. But you can theoretically use any of the other formats as well – you just won&amp;rsquo;t be able to use my instructions from hereon.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Options&lt;/strong&gt; and make sure these options are selected (they might be by default, I&amp;rsquo;m not sure):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use &amp;lt;g&amp;gt;&amp;lt;/g&amp;gt; and &amp;lt;x/&amp;gt; notation&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copy source text in target if no target is available&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;On the &lt;strong&gt;Output Location&lt;/strong&gt; tab, choose an output folder and give the package a name. I recommend mentioning the source and target language in both.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optionally, add any translation memories, terminology files and other supporting documents on the &lt;strong&gt;Support Material&lt;/strong&gt; tab.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you&amp;rsquo;re ready, click &lt;strong&gt;Execute&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rainbow now goes through each file, extracts translatable text based on your filter configurations, splits that text into segments (i.e. sentences) and stores it all in XLIFF (&lt;code&gt;.xlf&lt;/code&gt;) files. There will be one XLIFF file for each source file.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t worry if the log contains mildly alarming messages like &lt;code&gt;Trying to end a TextUnit that does not exist&lt;/code&gt;. As long as the error and warning counts at the bottom are both at 0, everything is fine.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If things went as they should, your output folder will contain these things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A folder called &lt;code&gt;original&lt;/code&gt;, which contains the original source files (for the translator&amp;rsquo;s reference).&lt;/li&gt;
&lt;li&gt;A folder called &lt;code&gt;work&lt;/code&gt;, which contains all the translatable &lt;code&gt;.xlf&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;A file called &lt;code&gt;manifest.rkm&lt;/code&gt;, which contains information about where each individual translatable text came from. Rainbow uses this to determine where to insert the translations as it converts the translated files back to their original formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want, you can open your files in &lt;a href=&#34;http://www.omegat.org/en/omegat.html&#34;&gt;OmegaT&lt;/a&gt; to see how they look for the translator.&lt;/p&gt;

&lt;h2 id=&#34;translating-the-project-files&#34;&gt;Translating the project files&lt;/h2&gt;

&lt;h3 id=&#34;sending-the-package-to-your-translator&#34;&gt;Sending the package to your translator&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, any serious CAT tool should be able to handle XLIFF files. By the same token, so should any serious translator. If your translator says they can&amp;rsquo;t, find another translator.&lt;/p&gt;

&lt;p&gt;You can email the files in a zip file, host them on Dropbox, or transfer them any other way you want. It doesn&amp;rsquo;t really matter, as long as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you get the translated files back in &lt;code&gt;.xlf&lt;/code&gt; format;&lt;/li&gt;
&lt;li&gt;the original folder structure of the &lt;code&gt;work&lt;/code&gt; folder is kept intact;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;manifest.rkm&lt;/code&gt; file is not tampered with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, I recommend not even sending the manifest file. The translator has no use for it.&lt;/p&gt;

&lt;h3 id=&#34;processing-the-package-after-translation&#34;&gt;Processing the package after translation&lt;/h3&gt;

&lt;p&gt;If everything went as it should, the translator should send you back the same basic set of files, with the same folder structure, except all the &lt;code&gt;.xlf&lt;/code&gt; files have been modified. You can open them with a text editor and see that each source segment now has a matching translation. You&amp;rsquo;re now going to run these files through Rainbow again to convert them back to their original format.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In Rainbow, create a new configuration file (&lt;strong&gt;File &amp;gt; New&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you&amp;rsquo;re like me, you&amp;rsquo;d expect to load up your previous configuration and continue where you left off. But that&amp;rsquo;s not how Rainbow works – you really do need a fresh config.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Drag the &lt;code&gt;manifest.rkm&lt;/code&gt; file into the file list.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Select &lt;strong&gt;Utilities &amp;gt; Translation Kit Post-Processing&lt;/strong&gt;. This loads up another pre-defined pipeline that more or less does the reverse of the one you used previously.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Execute&lt;/strong&gt;. You&amp;rsquo;ll see an overview of all the files that are going to be post-processed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The converted, translated files will be in a folder called &lt;code&gt;done&lt;/code&gt;, on the same level als the &lt;code&gt;original&lt;/code&gt; and &lt;code&gt;work&lt;/code&gt; folders.&lt;/p&gt;

&lt;h2 id=&#34;building-the-translated-project&#34;&gt;Building the translated project&lt;/h2&gt;

&lt;p&gt;Copy the translated files into your target-language project folder. Build the project. Done!&lt;/p&gt;

&lt;!--
## Translating subsequent updates

How to handle updates after the bulk is published? Just send out entire project again with TM included? Could work I guess.
--&gt;
</description>
    </item>
    
  </channel>
</rss>